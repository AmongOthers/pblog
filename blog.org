#+Title: Using Python+MetaWeblog to manage your blog 
#+options: toc:nil H:2

#+options: H:2
* Motivation
For the task of *blogging*, you can generate Html file locally, then using metaWeblog API to upload them to your blog hosting site.
This workflow has following benefits:
+ There are many ways to generate Html documents, you can choose which you like. 
  Especially, you can create clean and readable text file using =markdown= syntax and convert them to Html file. I personally choose =emacs/org-mode= for this task.
+ You can easily backup and reuse the content of your posts.
+ You can use version control tool such as =git= to track down the history.

A possible workflow is presented below:  
#+begin_src dot :exports results :file blog-workflow.png :cmdline -Kdot -Tpng
digraph G {
rankdir=LR;
subgraph{
blog[label="blog site"];
scm[label="Git Hosting site"];
}
subgraph cluster {
label="emacs/org-mode";
style=bold; 
txt_file[label="text version document", shape=note];
html_file[label="html version document", shape=note];
txt_file->html_file;
}
txt_file->scm[label=Git]; html_file->blog[label="metaWeblog API"];
}
#+end_src

#+results:
[[file:blog-workflow.png]]

We deliver a Python script =blog.py= to upload local Html file to blog site using metaWeblog API.
You can access full source code in [[https://github.com/huafengxi/pblog]]

* configuration
To use this script, you need to configure it first, change the following two lines of =config.py= properly.
#+BEGIN_SRC python
serviceUrl, appKey = 'http://www.cnblogs.com/ans42/services/metaweblog.aspx', 'ans42'
usr, passwd = 'ans42', 'xxxxx'
#+END_SRC

* Usages
After configuration. Now you can:
+ list your recent posts:
#+BEGIN_SRC sh
./blog.py list 12
#+END_SRC
It will list recent =12= posts, you can omit the number, then it will list =10= posts. 

+ Upload or Update your post from local Html file:
#+BEGIN_SRC sh
./blog.py post your-blog.html
#+END_SRC
This will upload =your-blog.html= to your blog site as a new post, or update existing post if you have posted it before.
=blog.py= will scan recent 10 posts, when it found a post whose title is the same as =your-blog.html=, 
then it will think =your-blog.html= has been posted already, and update this post instead of create a new one.

For convenience, you can post =org-mode= or =asciidoc= text file directly. Such as:
#+begin_src sh
./blog.py post your-blog.org
#+end_src

+ Delete a post:
#+BEGIN_SRC sh
./blog.py delete <post-id>
#+END_SRC

* Technical Details
There are actually two problems need to address:
+ Access the metaWeblog API: =blog.py= use =xmlrpclib= for this task. 
+ Upload mediaObject(such as Image/Video) and replace their references in locally generated Html:
  =blog.py= will extract all local image references embed in Html file, then upload them to blog site, replace the local image references using the returned *URL*.
  Image files will not be uploaded again if they are not modified. =blog.py= think a file has not been modified if its =MD5= has not been changed.

We will present how to wrap MetaWeblog API using =xmlrpclib= of Python, and how to solve the mediaObject reference in Html.

** Wrapper of MetaWeblog API
See RFC: http://www.xmlrpc.com/MetaWeblogApi for reference on MetaWeblog API.

One user on a site may have multiple blogs, one blog contain multiple posts, one post contain at least =title= and =description= attributes, as follwing figure shows.
#+begin_src dot :exports results :file blog-structure.png :cmdline -Kdot -Tpng
digraph G{
site[label="one user on a site"];
subgraph cluster_0{
style=filled;color=lightgrey; 
post1[label=<<B>Title</B><br/>Descriptions<br/>...>, shape=note];
post2[label=<<B>Title</B><br/>Descriptions<br/>...>, shape=note];
blog1[shape=folder]
blog1->post1; blog1->post2;
}
subgraph cluster_1{
style=filled;color=lightgrey; 
post3[label=<<B>Title</B><br/>Descriptions<br/>...>, shape=note];
post4[label=<<B>Title</B><br/>Descriptions<br/>...>, shape=note];
blog2[shape=folder]
blog2->post3; blog2->post4;
}
site->blog1; site->blog2;
}
#+end_src  

#+results:
[[file:blog-structure.png]]

The most import 3 entry points of metaWeblog are:
#+begin_example
metaWeblog.newPost (blogid, username, password, struct, publish) returns string
metaWeblog.editPost (postid, username, password, struct, publish) returns true
metaWeblog.getPost (postid, username, password) returns struct
#+end_example
The content of one blog are represented as =struct=.
you can upload the blog to site without publish to others, so comes the =publish= parameter to =newPost= and =editPost=, this =bool= value control whether the blog should be published.

There are also methods to list posts get/delete a post which won't be listed here. Final piece of the API is handle mediaObject in Html.
#+begin_example
MetaWeblog.newMediaObject (blogid, username, passwd, file) return URL of uploaded file
#+end_example

For these who are curisoty, following Python code demo how to wrap =newPost= methods and how to use it.
#+BEGIN_SRC python  
  import xmlrpclib
  class MetaWeblog:
      '''works with www.cnblogs.com atleast'''
      def __init__(self, serviceUrl, appKey, usr, passwd):
          self.serviceUrl, self.appKey, self.usr, self.passwd = serviceUrl, appKey, usr, passwd
          self.server = xmlrpclib.ServerProxy(self.serviceUrl)
  
      def newPost(self, title='Title used for test', description='this is a test post.', category='no category', publish=True, blogid='', **kw):
          return self.server.MetaWeblog.newPost(blogid, self.usr, self.passwd, dict(kw, title=title, description=description, category=category), publish)
  
      .....
      
  serviceUrl, appKey = 'http://www.cnblogs.com/ans42/services/MetaWeblog.aspx', 'ans42'
  usr, passwd = 'ans42', 'xxxxxx'
  blog = MetaWeblog(serviceUrl, appKey, usr, passwd)
  print blog.newPost('Title', 'content')
#+END_SRC

** Solve the mediaObject reference in Html
Todo
