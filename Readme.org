#+Title: Using Python+MetaWeblog to manage your blog 
#+options: toc:nil H:2

* Motivation and Technical Solution 
** manage our blogs as plain text locally has some benefits:
*** You can easily backup and reuse the content of your blog.
*** You can use version control tool such as Git to track down the history.
** _markdown_ syntax is clean for quick document as plain text. org-mode is good for writting document using _markdown_ syntax amony other things, the top 3 features attract me are:
*** simple but powerful keybindings for editing document outlines, You can not only fold/unfold a tree, but also cut/copy/pase a subtree, promote/demote a subtree.
*** powerful table editor with simple spreedsheet ability.
*** include and execute =source code= by org-babel, so you can prepare some *date* and *graph* with little effort.
** Once we generate Html version of blogs we can using MetaWeblog API to upload our blog to server. We will use Python for this task. There are actually two problems need address:
*** Simplify the MetaWeblog API by hiding some global configurations, instead using
*** Upload  mediaObject(such as Image/Video) and replace their references in Html.


* The content of this document
This document assume you use Python regually, it is not a tutorial for Python. 
We will present how to wrap MetaWeblog API using =xmlrpclib= of Python, and how to solve the mediaObject reference in Html.

* Wrapper of MetaWeblog API
** basic concept of MetaWeblog
See RFC: http://www.xmlrpc.com/MetaWeblogApi for reference on MetaWeblog API.
The most import 3 entry point is:
#+begin_example
metaWeblog.newPost (blogid, username, password, struct, publish) returns string
metaWeblog.editPost (postid, username, password, struct, publish) returns true
metaWeblog.getPost (postid, username, password) returns struct
#+end_example
The content of one blog are represented as =struct=.
To understand MetaWeblog API you need to understand:
+ one user on a site may have multiple blogs, so =newPost= accepts =blogid= as parameter.
#+begin_src dot :file blog-structure.png :cmdline -Kdot -Tpng
digraph G{
site[label="one user on a site"];
subgraph cluster_0{
style=filled;color=lightgrey; 
post1[label=<<B>Title</B><br/>Descriptions<br/>...>, shape=note];
post2[label=<<B>Title</B><br/>Descriptions<br/>...>, shape=note];
blog1[shape=folder]
blog1->post1; blog1->post2;
}
subgraph cluster_1{
style=filled;color=lightgrey; 
post3[label=<<B>Title</B><br/>Descriptions<br/>...>, shape=note];
post4[label=<<B>Title</B><br/>Descriptions<br/>...>, shape=note];
blog2[shape=folder]
blog2->post3; blog2->post4;
}
site->blog1; site->blog2;
}
#+end_src  

#+results:
[[file:blog-structure.png]]

+ you can upload the blog to site without publish to others, so comes the =publish= parameter to =newPost= and =editPost=, this =bool= value control whether the blog should be published.

You may wonder how to list the blogs and posts of a user, here they comes:
#+begin_example
blogger.getUsersBlogs (appKey, username, password) return array of BlogInfo
metaWeblog.getRecentPosts (blogid, username, password, numOfPosts) return array of Post
#+end_example

There are also methods to query/delete a post which won't be listed here. Final piece of the API is handle mediaObject in Html.
#+begin_example
MetaWeblog.newMediaObject (blogid, username, passwd, file) return URL of uploaded file
#+end_example

For these who are curisoty, following Python code demo how to wrap =getRecentPosts= and =newPost= methods and how to use them.
#+begin_src python  
  class MetaWeblog:
      '''works with www.cnblogs.com atleast'''
      def __init__(self, serviceUrl, appKey, usr, passwd):
          self.serviceUrl, self.appKey, self.usr, self.passwd = serviceUrl, appKey, usr, passwd
          self.server = xmlrpclib.ServerProxy(self.serviceUrl)
  
      def getRecentPosts(self, count=5, blogid=''):
          return self.server.MetaWeblog.getRecentPosts(blogid, self.usr, self.passwd, count)
          
      def newPost(self, title='Title used for test', description='this is a test post.', category='no category', publish=True, blogid='', **kw):
          return self.server.MetaWeblog.newPost(blogid, self.usr, self.passwd, dict(kw, title=title, description=description, category=category), publish)
  
      .....
      
  serviceUrl, appKey = 'http://www.cnblogs.com/ans42/services/MetaWeblog.aspx', 'ans42'
  usr, passwd = 'ans42', 'xxxxxx'
  blog = MetaWeblog(serviceUrl, appKey, usr, passwd)
  print blog.getRecentPosts() # list 5 recent posts
  print blog.newPost('Title', 'content') # create a new post
#+end_src
You can access full source code in http://github.com


